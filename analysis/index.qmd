---
title: "Most Visited Museums 2024"
author: "Jan Oledan"
abstract: "Analysis of most visited art museums in 2024"
format: 
  html: default
---

## To-do

- [ ] Writing 
- [ ] Fix spacing in text 
- [ ] Top 300 paintings

```{r}
#| output: false
#| eval: false
#| warning: false
#| error: false

rm(list=ls())
library(tidyverse)
library(janitor)
library(stringr)
library(gt)
library(ggplot2)
library(ggiraph)
library(sf)
library(showtext)
library(gfonts)
library(systemfonts)
library(ggrepel)
library(countrycode)
library(ggflag)

# colour palette
mcb_palette <- c(
  "Blue" = "#5E7F9B",
  "Teal" = "#3B7D6C",
  "Orange" = "#E07A3F",
  "Wine" = "#762A3B",
  "Ochre" = "#C49E4E",
  "Pink" = "#C4A69F",
  "Charcoal" = "#2E2E2E",
  "White" = "#F2EEE3",
  "Grey" = "#A49E94",
  "Light Grey" = "#D6D2CA"
)

```

```{r}

# custom theme
jtheme <- function(
    gridline_x = FALSE, 
    gridline_y = FALSE, 
    axisline_x = FALSE,
    axisline_y = FALSE,
    axistext_x = FALSE, 
    axistext_y = FALSE, 
    axis_ticks = FALSE) {

    # function to test conditions
    element_or_blank <- function(cond, el) {
        if (isTRUE(cond)) el else element_blank()
    }
    # gridlines 
    gridline <- element_line(
        linetype = "dashed",
        linewidth = 0.15,
        color = "#A49E94"
    )
    gridline_x <- element_or_blank(gridline_x, gridline)
    gridline_y <- element_or_blank(gridline_y, gridline)

    # axis lines
    axisline <- element_line(
        linetype = "solid",
        lineend = "square",
        linewidth = 1,
        color = "#2E2E2E"
    )
    axisline_x <- element_or_blank(axisline_x, axisline)
    axisline_y <- element_or_blank(axisline_y, axisline)

    # axis text, ticks
    axistext_x <- element_or_blank(axistext_x, element_text(size = 12, color = "#2E2E2E"))
    axistext_y <- element_or_blank(axistext_y, element_text(size = 12, color = "#2E2E2E"))
    axis_ticks_line <- element_or_blank(axis_ticks, 
        element_line(linetype = "solid", linewidth = 0.8, color = "#2E2E2E",
        lineend = "square"))

    # minimal
    theme_minimal(
        base_family = "Sora"
    ) +
    theme(
        plot.margin = unit(c(10, 10, 10, 10), "pt"),
        # text elements
        plot.title = element_text(
            face = "bold", 
            color = "#2E2E2E",
            size = 20, 
            margin = margin(t=0, r=0, b=10, l=0, "pt")),
        plot.subtitle = element_text(
            color = "#2E2E2E",
            size = 14, 
            margin = margin(t=0, r=0, b=10, l=0, "pt")),
        plot.caption = element_text(
            color = "#2E2E2E",
            size = 12,
            hjust = 0, 
            margin = margin(t=10, r=0, b=0, l=0, "pt")), 

        # axis text x, y 
        axis.text.x = axistext_x,
        axis.text.y = axistext_y,
        #text = element_text(size = 14, family = "Sora"),
        # elements
        legend.position="none",

        # gridlines
        panel.grid.major.x = gridline_x,
        panel.grid.major.y = gridline_y,
        panel.grid.minor = element_blank(),
    
        # positions 
        plot.title.position = "plot",
        plot.caption.position = "plot",

        # axis x line ticks
        axis.ticks.x = axis_ticks_line,
        #axis.ticks.length.x = unit(5,"pt"),

        # axis lines
        axis.line.x = axisline_x,
        axis.line.y = axisline_y
        
    )
}


```

```{r}
#| warning: false
#| error: false

# read data from previous scraping
df <- read_delim(paste0("./data/out/museums_cleaned_2019_2024.csv")) %>%
    mutate(visitors = round(visitors/1000000, 1),
        address = paste(museum, city, sep = ", ")) 

p <- ggplot(df %>% filter(rank <= 10, year == 2024), 
    aes(x = reorder(address, visitors), 
        y = visitors)) + 
    geom_bar(
        stat = "identity",
        fill = mcb_palette["Blue"]) + 
    geom_text(aes(label = visitors, y = visitors-0.5), 
        color = mcb_palette["White"],  # Text color inside bar
        family = "Sora", 
        size = 5) +
    labs(
        title = "Down the back, but who cares, still the Louvre",
        subtitle = "Number of visitors in 2024*, millions",
        caption = "Source: Wikipedia. *Most recent visitor values from 2023 or 2024.",
        x = NULL, 
        y = NULL) +
    coord_flip() + 
    jtheme(axistext_x = TRUE, 
        axistext_y = TRUE,
        axis_ticks = FALSE,
        axisline_y = TRUE)

girafe(ggobj = p, width_svg = 8, height_svg = 6)

```

```{r}

df2 <- df %>% 
    pivot_wider(names_from = year, 
        values_from = c(visitors, rank),
        values_fill = NA) %>%
    arrange(rank_2024)

p1 <- ggplot(data = df2 %>% 
        filter(!is.na(rank_2024), rank_2024 <= 10)) +
    geom_segment(aes(y = visitors_2019, 
        yend = visitors_2024,
        x = museum, 
        xend = museum),
        color = mcb_palette["Grey"],
        linewidth = 2) + 
        # lineend = "butt",
        # linejoin = "mitre",
        # arrow = arrow(angle = 25, length = unit(0.2, "cm"),
        #     ends = "last", type = "closed")) +
    geom_point(
        aes(x = reorder(museum, -rank_2024), y = visitors_2024),
        color = mcb_palette["Orange"],
        size = 4) +
    geom_point(
        aes(x = reorder(museum, -rank_2024), y = visitors_2019),
        color = mcb_palette["Blue"],
        size = 4) +
    labs(
        title = "Witty title",
        subtitle = "Change in annual visitors*, 2019-2024, millions",
        caption = "Source: Wikipedia. *Most recent visitor values from 2023 or 2024.",
        x = NULL, 
        y = NULL) +
    coord_flip() + 
    scale_x_discrete(expand = c(0,0.2),
        labels = function(x) str_wrap(x, width = 25)) +
    scale_y_continuous(expand = c(0,0), breaks = c(0,2,4,6,8,10), limits = c(0, 10)) +
    jtheme(axistext_x = TRUE, 
        axistext_y = TRUE,
        axis_ticks = FALSE,
        axisline_x = TRUE,
        gridline_x = TRUE,
        gridline_y = TRUE)
    
girafe(ggobj = p1, width_svg = 8, height_svg = 6)


```


```{r}
# with 2
df_both <- df %>% 
    filter(n == 2) %>%
    group_by(museum) %>% 
    mutate(avg_rank = mean(rank),
        diff = lead(visitors) - visitors,
        diff = max(diff, na.rm = T),
        address = str_trim(address)) %>%
    arrange(-diff)

df_pct <- df_both %>%
    pivot_wider(names_from = year, 
        values_from = c(visitors, rank),
        values_fill = NA) %>%
    arrange(rank_2019) %>%
    mutate(pct_change = (visitors_2024-visitors_2019)/visitors_2019*100,
    val_2019 = 1,
    val_2024 = 1+(1*(pct_change/100)))

df_change <- df_pct %>%
    select(museum, address, val_2019, val_2024, pct_change) %>%
    pivot_longer(cols = c(val_2019, val_2024),
        names_to = "year",
        names_transform = list(year = as.numeric),
        names_prefix = "val_",
        values_to = "value") %>%
    mutate(case = case_when(
        pct_change < 0 ~ "loss",
        pct_change == 0 ~ "no change",
        pct_change > 0 ~ "gain"
    ))

table(df_change$case)

# select
gains <- c("Shanghai Museum", 
    "Art Gallery of New South Wales", 
    "The Museum of Modern Art")
losses <- c("National Gallery", 
    "Louvre Museum", 
    "The Art Institute of Chicago")

df_gains <- df_both %>% filter(museum %in% gains)
df_losses <- df_both %>% filter(museum %in% losses)


slope_pct <- ggplot() + 
    geom_point(data = df_change %>% filter(case == "loss"),
        aes(x = year, y = value, group = case),
            color = mcb_palette["Orange"], 
            size = 4) +
    geom_line(data = df_change %>% filter(case == "loss"),
        aes(x = year, y = value, group = address), 
            color = mcb_palette["Orange"], 
            linewidth = 2) +
    geom_point(data = df_change %>% filter(case == "gain"),
        aes(x = year, y = value, group = case),
            color = mcb_palette["Blue"], 
            size = 4) +
    geom_line(data = df_change %>% filter(case == "gain"),
        aes(x = year, y = value, group = address), 
            color = mcb_palette["Blue"], 
            linewidth = 2) +
    geom_point(data = df_change %>% filter(case == "no change"),
        aes(x = year, y = value, group = case),
            color = mcb_palette["Teal"], 
            size = 4) +
    geom_line(data = df_change %>% filter(case == "no change"),
        aes(x = year, y = value, group = address), 
            color = mcb_palette["Teal"], 
            linewidth = 2) +
    scale_x_continuous(
        breaks = c(2019, 2024),
        limits = c(2019, 2024),
        position = "top") +
    scale_y_continuous(
        expand = c(0, 0), 
        breaks = c(0, 2),
        limits = c(0.3, 3.2)) +
    labs(
        title = "Title",
        subtitle = "Number of visitors, 2019 to 2024*, millions",
        caption = "Source: Wikipedia. *Most recent visitor values from 2023 or 2024.",
        x = NULL, 
        y = NULL) +
    #scale_color_manual(values = unname(mcb_palette)) + 
    jtheme(axistext_x = TRUE, 
        axis_ticks = FALSE,
        axisline_y = FALSE)


girafe(ggobj = slope_pct, width_svg = 8, height_svg = 8)


slope <- ggplot() +
    geom_line(data = df_both, 
        aes(x = year, y = visitors, group = address), color = mcb_palette["Light Grey"], linewidth = 4) +
    # geom_point(data = df_both, 
    #     aes(x = year, y = visitors, group = address, alpha = 1), color = mcb_palette["Grey"], alpha = 0.5, size = 5) +
    geom_point(data = df_gains, 
        aes(x = year, y = visitors, group = address),
        color = mcb_palette["Blue"],
        size = 5) +
    geom_text(data = df_losses %>% filter (year == 2019),
        aes(x = 2019, y = visitors, label = visitors),
        color = mcb_palette["Wine"],
        hjust = 1,
        vjust = 0,
        nudge_x = -0.2,
        nudge_y = -0.1,
        size = 12,
        size.unit = "pt") +
    geom_line(data = df_gains, 
        aes(x = year, y = visitors, group = address), 
        color = mcb_palette["Blue"], 
        linewidth = 4)  +
    geom_line(data = df_losses, 
        aes(x = year, y = visitors, group = address), color = mcb_palette["Wine"], linewidth = 4) +
    geom_point(data = df_losses, 
        aes(x = year, y = visitors, group = address), color = mcb_palette["Wine"], size = 5) +
    scale_x_continuous(
        breaks = c(2019, 2024),
        limits = c(2018, 2024),
        position = "bottom") +
    scale_y_continuous(
        expand = c(0, 0), 
        limits = c(0.5, 10)) +
    labs(
        title = "Title",
        subtitle = "Change in number of visitors, 2019 to 2024*, millions",
        caption = "Source: Wikipedia. *Most recent visitor values from 2023 or 2024.",
        x = NULL, 
        y = NULL) +
    #scale_color_manual(values = unname(mcb_palette)) + 
    jtheme(axistext_x = TRUE, 
        axis_ticks = FALSE,
        axisline_y = FALSE)

girafe(ggobj = slope, width_svg = 6, height_svg = 6)





slope

```

```{r}

# prepare for bar chart
df2 <- df %>%
    filter(year==2024) %>%
    group_by(continent) %>%
    summarise(n = n()) %>%
    arrange(-n) %>%
    mutate(
        continent = factor(continent, levels = continent[order(n)]),
        cumulative = cumsum(n),
        position = lag(cumulative),
        position = replace_na(position, 0))
    
# assign colours
continent_colors <- c(
  "Americas" = unname(mcb_palette["Ochre"]),
  "Asia"     = unname(mcb_palette["Teal"]),
  "Europe"   = unname(mcb_palette["Blue"]),
  "Oceania"  = unname(mcb_palette["Grey Pink"])
)

p2 <- ggplot(df2, aes(x = 1, y = n, fill = continent)) +
    geom_col(width = 0.5) +
    geom_text(aes(
            x = 1.3, 
            y = position, 
            label = paste(continent, n, sep = ", "),
            color = continent),
            family = "Sora", 
            hjust = 0, size = 4) +
    coord_flip(clip = "off") +
    scale_y_continuous(limits = c(0, 105), expand = c(0, 0)) +  # Remove padding on y-axis (bar length)
    scale_x_continuous(expand = c(0, 0)) +  # Remove padding on x-axis (position axis) +
    scale_color_manual(values = continent_colors) +
    scale_fill_manual(values = continent_colors) +
    labs(
        title = "Witty title",
        subtitle = "Number of museums in the top 100 most visited in 2024*",
        caption = "Source: Wikipedia, Art Newspaper. *Most recent visitor values from 2023 or 2024.",
        x = NULL, 
        y = NULL) +
    jtheme(axistext_x = FALSE) 

girafe(ggobj = p2, width_svg = 10, height_svg = 3)

  
```
