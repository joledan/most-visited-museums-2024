---
title: "Most Visited Museums 2024"
author: "Jan Oledan"
abstract: "Analysis of most visited art museums in 2024"
format: 
  html: default
---

## To-do

- [ ] Writing 
- [ ] Fix spacing in text 
- [ ] Top 300 paintings

```{r}
#| output: false
#| eval: false
#| warning: false
#| error: false

rm(list=ls())
library(tidyverse)
library(janitor)
library(stringr)
library(gt)
library(ggplot2)
library(ggiraph)
library(tidygeocoder)
library(sf)
library(showtext)
library(gdtools)
library(gfonts)
library(systemfonts)
library(ggrepel)

# colour palette
mcb_palette <- c(
  "Blue" = "#5E7F9B",
  "Teal" = "#3B7D6C",
  "Orange" = "#E07A3F",
  "Wine" = "#762A3B",
  "Ochre" = "#C49E4E",
  "Grey Pink" = "#C4A69F",
  "Charcoal" = "#2E2E2E",
  "White" = "#F2EEE3",
  "Grey" = "#A49E94"
)

```

```{r}

jtheme <- function(
    gridline_x = FALSE, 
    gridline_y = FALSE, 
    axis_text = FALSE, 
    axis_ticks = FALSE) {

    # function to test conditions
    element_or_blank <- function(cond, el) {
        if (isTRUE(cond)) el else element_blank()
    }
    gridline_x <- element_or_blank(gridline_x, gridline)
    # gridlines 
    gridline <- element_line(
        linetype = "dashed",
        linewidth = 0.15,
        color = "#A49E94"
    )
    gridline_x <- element_or_blank(gridline_x, gridline)
    gridline_y <- element_or_blank(gridline_y, gridline)

    # axis text, ticks
    axis_text <- element_or_blank(axis_text, element_text(size = 12, color = "#2E2E2E"))
    axis_ticks_line <- element_or_blank(axis_ticks, element_line(linetype = "solid", linewidth = 0.25, color = "#A49E94"))
    axis_ticks_length_x <- if (isTRUE(axis_ticks)) unit(4, units = "pt") else element_blank()

    # minimal
    theme_minimal(
        base_family = "Sora"
    ) +
    theme(
        plot.margin = unit(c(10, 10, 10, 10), "pt"),
        # text elements
        plot.title = element_text(
            face = "bold", 
            color = "#2E2E2E",
            size = 20, 
            margin = margin(t=0, r=0, b=10, l=0, "pt")),
        plot.subtitle = element_text(
            color = "#2E2E2E",
            size = 14, 
            margin = margin(t=0, r=0, b=10, l=0, "pt")),
        plot.caption = element_text(
            color = "#2E2E2E",
            size = 12,
            hjust = 0, 
            margin = margin(t=10, r=0, b=0, l=0, "pt")), 
        axis.text = axis_text,
        # elements
        legend.position="none",

        # gridlines
        panel.grid.major.x = gridline_x,
        panel.grid.major.y = gridline_y,
        panel.grid.minor = element_blank(),
    
        # positions 
        plot.title.position = "plot",
        plot.caption.position = "plot",

        # axis x line ticks
        axis.ticks.x = axis_ticks_line,
        axis.ticks.x.length = axis_ticks_length_x
    )
}


```

```{r}
#| warning: false
#| error: false

# read data from previous scraping
df <- read_delim(paste0("./data/out/museums_cleaned_2019_2024.csv")) %>%
    mutate(visitors = round(visitors/1000000, 1),
        address = paste(museum, city, sep = ", ")) 

p <- ggplot(df %>% filter(rank <= 10, year == 2024), 
    aes(x = reorder(address, visitors), 
        y = visitors)) + 
    geom_bar(
        stat = "identity",
        fill = mcb_palette["Blue"]) + 
    geom_text(aes(label = visitors, y = visitors-0.5), 
        #position = position_stack(vjust = 0.9), 
        color = mcb_palette["White"],  # Text color inside bar
        family = "Sora", 
        size = 5) +
    labs(
        title = "Down the back, but who cares, still the Louvre",
        subtitle = "Number of visitors in 2024*, millions",
        caption = "Source: Wikipedia. *Most recent visitor values from 2023 or 2024.",
        x = NULL, 
        y = NULL) +
    scale_y_continuous(
        expand = c(0,0), 
        position = "right") + 
    coord_flip() + 
    jtheme()


girafe(ggobj = p, width_svg = 8, height_svg = 6)

```

```{r}
# with 2
df_both <- df %>% 
    filter(n == 2) %>%
    group_by(museum) %>% 
    mutate(avg_rank = mean(rank),
        diff = lead(visitors) - visitors,
        diff = max(diff, na.rm = T),
        address = str_trim(address))

df_hl <- df_both %>% filter(avg_rank <= 10)
df_gy <- df_both %>% filter(avg_rank > 10)

slope <- ggplot() +
    geom_line(data = df_gy, 
        aes(x = year, y = visitors, group = address, alpha = 0.6), 
        color = mcb_palette["Grey"], 
        linewidth = 4) +
    geom_point(data = df_gy, 
        aes(x = year, y = visitors, group = address, color = address, alpha = 0.6), 
        color = mcb_palette["Grey"],
        size = 4) +
    geom_line(data = df_hl, 
        aes(x = year, y = visitors, group = address, color = address), linewidth = 4) +
    geom_point(data = df_hl, 
        aes(x = year, y = visitors, group = address, color = address), size = 4) +
    geom_text_repel(
        data = df_hl %>% filter(year == 2024),
            aes(x = year, y = visitors, label = address),
        family = "Sora",
        direction = "y", 
        hjust = 0,
        vjust = 0.5,
        nudge_x = 0.1, 
        box.padding = 0,
        point.padding = 0, 
        min.segment.length = 0,
        segment.color = NA
        ) +
    scale_x_continuous(
        breaks = c(2019, 2024),
        limits = c(2019, 2027),
        position = "top") +
    scale_y_continuous(
        expand = c(0, 0), 
        breaks = c(0, 2, 4, 8, 10),
        limits = c(0.5, 10)) +
    labs(
        title = "Down the back, but who cares, still the Louvre",
        subtitle = "Number of visitors in 2024*, millions",
        caption = "Source: Wikipedia. *Most recent visitor values from 2023 or 2024.",
        x = NULL, 
        y = NULL) +
    scale_color_manual(values = unname(mcb_palette)) +
    jtheme()

slope
```

```{r}

# prepare for bar chart
df2 <- df %>%
    filter(year==2024) %>%
    group_by(continent) %>%
    summarise(n = n()) %>%
    arrange(-n) %>%
    mutate(
        continent = factor(continent, levels = continent[order(n)]),
        cumulative = cumsum(n),
        position = lag(cumulative),
        position = replace_na(position, 0))
    
# assign colours
continent_colors <- c(
  "Americas" = unname(mcb_palette["Ochre"]),
  "Asia"     = unname(mcb_palette["Teal"]),
  "Europe"   = unname(mcb_palette["Blue"]),
  "Oceania"  = unname(mcb_palette["Grey Pink"])
)

p2 <- ggplot(df2, aes(x = 1, y = n, fill = continent)) +
    geom_col(width = 0.5) +
    geom_text(aes(
            x = 1.3, 
            y = position, 
            label = paste(continent, n, sep = ", "),
            color = continent),
            family = "Sora", 
            hjust = 0, size = 4) +
    coord_flip(clip = "off") +
    scale_y_continuous(limits = c(0, 105), expand = c(0, 0)) +  # Remove padding on y-axis (bar length)
    scale_x_continuous(expand = c(0, 0)) +  # Remove padding on x-axis (position axis) +
    scale_color_manual(values = continent_colors) +
    scale_fill_manual(values = continent_colors) +
    labs(
        title = "Witty title",
        subtitle = "Number of museums in the top 100 most visited in 2024*",
        caption = "Source: Wikipedia, Art Newspaper. *Most recent visitor values from 2023 or 2024.",
        x = NULL, 
        y = NULL) +
    jtheme(axis_text = FALSE) 


girafe(ggobj = p2, width_svg = 10, height_svg = 3)

  
```
