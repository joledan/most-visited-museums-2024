---
title: "Most Visited Museums 2024"
author: "Jan Oledan"
abstract: "Analysis of most visited art museums in 2024"
format: 
  html: default
---

```{r}
#| output: false
library(tidyverse)
library(rvest)
library(janitor)
library(stringr)
library(gt)
library(ggplot2)
library(ggiraph)
library(tidygeocoder)

url <- "https://en.wikipedia.org/wiki/List_of_most-visited_art_museums"

# get url, table, clean column names
df <- read_html(url) %>%
    html_node("table.wikitable") %>%
    html_table(fill = TRUE) %>%
    clean_names() %>%
    mutate(
        visitors_annually = str_replace_all(visitors_annually, ", ", ","), 
        year = str_extract(visitors_annually, "(?<=\\().+(?=\\))") %>% as.numeric(), 
        visitors = str_extract(visitors_annually, "^[^\\s]+") %>% str_replace_all(., ",", "") %>% as.numeric(),
        rank = rank(-visitors)
        ) %>%
    select(rank, museum, country_and_city, year, visitors) %>% 
    arrange(rank) %>%
    mutate(address = paste(museum, country_and_city, sep = ", "),
        visitors_millions = visitors/1000000)
    
    #  %>% 
    # geocode(address, method = 'osm', full_results = TRUE)

# test <- df %>%
#     geocode(address, method = 'arcgis', full_results = TRUE)

# osm <- df %>%
#     geocode(address, method = 'osm', full_results = TRUE)


```

```{r}

# Barplot

p <- ggplot(df %>% 
    filter(rank <= 10), aes(x=reorder(museum, visitors_millions), y=visitors_millions)) + 
    geom_bar_interactive(aes(tooltip = visitors_millions), 
        stat = "identity",
        fill = "steelblue") + 
    labs(x = "", y = "Visitors in 2024* (millions)") +
    scale_y_continuous(expand = c(0,0), position = "right") + 
    coord_flip() + 
    theme_minimal() + 
    theme(
        # Axis lines
        axis.line = element_line(color = "black", linewidth = 0.5),
        axis.line.y = element_line(),
        axis.line.x.top = element_line(color = "black"),  # show top x-axis line

        # Margin for top axis title and ticks
        axis.title.x.top = element_text(margin = margin(b = 10)),
        axis.text.x.top = element_text(margin = margin(b = 5)),

        # Optional: give plot more breathing room
        plot.margin = margin(t = 20, r = 20, b = 20, l = 20)
    )


girafe(ggobj = p, width = 10, height = 6)


```