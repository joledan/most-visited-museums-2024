---
title: "Most Visited Museums 2024"
author: "Jan Oledan"
abstract: "Analysis of most visited art museums in 2024"
format: 
  html: default
---

## To-do

- [ ] Bubble plot
- [ ] Add flags
- [ ] Writing 
- [ ] Fix spacing in text 

```{r}
#| output: false
#| eval: false
#| warning: false
#| error: false

library(tidyverse)
library(rvest)
library(janitor)
library(stringr)
library(gt)
library(ggplot2)
library(ggiraph)
library(tidygeocoder)
library(sf)
library(showtext)
library(gdtools)
library(gfonts)
library(systemfonts)

url <- "https://en.wikipedia.org/wiki/List_of_most-visited_art_museums"

# get url, table, clean column names
df <- read_html(url) %>%
    html_node("table.wikitable") %>%
    html_table(fill = TRUE) %>%
    clean_names() %>%
    mutate(
        museum = str_remove(museum,  "\\s*\\([^\\)]+\\)") %>% str_trim(), 
        address = paste(museum, country_and_city, sep = ", "),
        address = case_when(
            address %in% c("Gyeongju National Museum, Gyeongju",
                "National Museum of Modern and Contemporary Art, Gwacheon",
                "National Museum of Modern and Contemporary Art, Seoul", 
                "National Museum of Korea, Seoul", 
                "National Folk Museum of Korea, Seoul") ~ paste0(address, ", South Korea"),
            TRUE ~ address
        ),
        visitors_annually = str_replace_all(visitors_annually, ", ", ","), 
        year = str_extract(visitors_annually, "(?<=\\().+(?=\\))") %>% as.numeric(), 
        visitors = str_extract(visitors_annually, "^[^\\s]+") %>% str_replace_all(., ",", ""),
        visitors = case_when( # fix value of NPG
            museum == "National Portrait Gallery" ~ "1578065",
            TRUE ~ visitors),
        visitors = as.numeric(visitors)/1000000, 
        rank = rank(-visitors)
        ) %>%
    geocode(address, method = 'arcgis', full_results = TRUE) %>%
    select(rank, museum, visitors, year, address, 
        lat, long, 
        score = attributes.Score,
        iso3 = attributes.Country,
        country = attributes.CntryName) %>%
    arrange(rank)

write_delim(df, paste0("./data/out/most_visited_museums_2024.csv"))

```

```{r}
#| warning: false
#| error: false

# read data from previous scraping
df <- read_delim(paste0("./data/out/most_visited_museums_2024.csv")) %>% mutate(visitors = round(visitors, 1))

# colour palette
mcb_palette <- c(
  "Blue" = "#5E7F9B",
  "Teal" = "#3B7D6C",
  "Orange" = "#E07A3F",
  "Wine" = "#762A3B",
  "Ochre" = "#C49E4E",
  "Grey Pink" = "#C4A69F",
  "Charcoal" = "#2E2E2E",
  "White" = "#F2EEE3",
  "Grey" = "#A49E94"
)

p <- ggplot(df %>% 
    filter(rank <= 10), 
    aes(x = reorder(museum, visitors), 
        y = visitors)) + 
    geom_bar_interactive(aes(tooltip = visitors), 
        stat = "identity",
        fill = mcb_palette["Blue"]) + 
    geom_text(aes(label = visitors, y = visitors-0.5), 
        #position = position_stack(vjust = 0.9), 
        color = mcb_palette["White"],  # Text color inside bar
        family = "Sora", 
        size = 5) +
    labs(
        title = "Down the back, but who cares, still the Louvre",
        subtitle = "Number of visitors in 2024*, millions",
        caption = "Source: Wikipedia. *Most recent visitor values from 2023 or 2024.",
        x = "", 
        y = "") +
    scale_y_continuous(
        expand = c(0,0), 
        position = "right",
        breaks = c(0, 4, 8)) + 
    coord_flip() + 
    theme_minimal(base_family = "Sora") + 
    theme(
        text = element_text(family = "Sora"),
        # Axis lines
        axis.line = element_line(color = "black", linewidth = 0.5),
        axis.line.y = element_line(linewidth = 1, color = mcb_palette["Charcoal"]),
        axis.line.x = element_line(linewidth = 1, color = mcb_palette["Charcoal"]),
        #axis.line.x.top = element_line(color = "black"),  # show top x-axis line
        # text
        plot.title = element_text(face = "bold", size = 20, margin = margin(t=0, r=0, b=5, l=0, "pt")),
        plot.subtitle = element_text(size = 14, margin = margin(t=0, r=0, b=10, l=0, "pt")),
        plot.caption = element_text(hjust = 0, margin = margin(t=10, r=0, b=0, l=0, "pt")), 

        # title, subtitle position 
        plot.title.position = "plot", 
        plot.caption.position =  "plot",
        # margin for top axis title and ticks
        #axis.title.x.top = element_text(margin = margin(b = 10)),
        axis.text.x.top = element_text(margin = margin(b = 5), size = 12),
        axis.text.y = element_text(hjust = 0, size = 12, margin = margin(t=0, r=0, b=0, l=-12, "pt")),
        # Optional: give plot more breathing room
        #plot.margin = margin(t = 20, r = 20, b = 20, l = 20),
        # grid lines
        panel.grid.minor.x = element_blank(),
        panel.grid.major.y = element_blank()
    )

girafe(ggobj = p, width_svg = 8, height_svg = 6)

```


```{r}

# df_sf <- st_as_sf(df, coords = c("long", "lat"))

# ggplot() +
#   geom_point(data = df, aes(x = long, y = lat, size = visitors)) + scale_size(
#     range = c(1, 9),
#     guide = guide_legend(
#       direction = "horizontal",
#       nrow = 1,
#       label.position = "bottom"))


```