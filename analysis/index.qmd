---
title: "Most Visited Museums 2024"
author: "Jan Oledan"
abstract: "Analysis of most visited art museums in 2024"
format: 
  html: default
---

## To-do

- [ ] Bubble plot
- [ ] Add flags
- [ ] Writing 
- [ ] Fix spacing in text 

```{r}
#| output: false
#| eval: false
#| warning: false
#| error: false

rm(list=ls())
library(tidyverse)
library(janitor)
library(stringr)
library(gt)
library(ggplot2)
library(ggiraph)
library(tidygeocoder)
library(sf)
library(showtext)
library(gdtools)
library(gfonts)
library(systemfonts)
library(ggrepel)

# colour palette
mcb_palette <- c(
  "Blue" = "#5E7F9B",
  "Teal" = "#3B7D6C",
  "Orange" = "#E07A3F",
  "Wine" = "#762A3B",
  "Ochre" = "#C49E4E",
  "Grey Pink" = "#C4A69F",
  "Charcoal" = "#2E2E2E",
  "White" = "#F2EEE3",
  "Grey" = "#A49E94"
)

```

```{r}
#| warning: false
#| error: false

# read data from previous scraping
df <- read_delim(paste0("./data/out/museums_cleaned_2019_2024.csv")) %>%
    mutate(visitors = round(visitors/1000000, 1),
        address = paste(museum, city, sep = ", "))

p <- ggplot(df %>% 
    filter(rank <= 10 & year == 2024), 
    aes(x = reorder(address, visitors), 
        y = visitors)) + 
    geom_bar_interactive(aes(tooltip = visitors), 
        stat = "identity",
        fill = mcb_palette["Blue"]) + 
    geom_text(aes(label = visitors, y = visitors-0.5), 
        #position = position_stack(vjust = 0.9), 
        color = mcb_palette["White"],  # Text color inside bar
        family = "Sora", 
        size = 5) +
    labs(
        title = "Down the back, but who cares, still the Louvre",
        subtitle = "Number of visitors in 2024*, millions",
        caption = "Source: Wikipedia. *Most recent visitor values from 2023 or 2024.",
        x = "", 
        y = "") +
    scale_y_continuous(
        expand = c(0,0), 
        position = "right") + 
    coord_flip() + 
    theme_minimal(base_family = "Sora") + 
    theme(
        plot.margin = unit(c(10, 10, 10, 10), "pt"),
        text = element_text(family = "Sora"),
        # Axis lines
        axis.line = element_blank(),
        axis.line.y = element_blank(),
        axis.line.x = element_blank(),
        #axis.line.x.top = element_line(color = "black"),  # show top x-axis line
        # text
        plot.title = element_text(face = "bold", size = 20, margin = margin(t=0, r=0, b=5, l=0, "pt")),
        plot.subtitle = element_text(size = 14, margin = margin(t=0, r=0, b=10, l=0, "pt")),
        plot.caption = element_text(hjust = 0, margin = margin(t=10, r=0, b=0, l=0, "pt")), 

        # title, subtitle position 
        plot.title.position = "plot", 
        plot.caption.position =  "plot",
        # margin for top axis title and ticks
        #axis.title.x.top = element_text(margin = margin(b = 10)),
        axis.text.x.top = element_blank(),
        axis.text.y = element_text(hjust = 0, size = 12, margin = margin(t=0, r=0, b=0, l=-12, "pt")),
        # Optional: give plot more breathing room
        #plot.margin = margin(t = 20, r = 20, b = 20, l = 20),
        # grid lines
        panel.grid = element_blank()
        #panel.grid.minor.x = element_blank(),
        #panel.grid.major.y = element_blank(
    )

girafe(ggobj = p, width_svg = 8, height_svg = 6)

```

```{r}
# with 2
df_both <- df %>% 
    filter(n == 2) %>%
    group_by(museum) %>% 
    mutate(avg_rank = mean(rank),
        diff = lead(visitors) - visitors,
        diff = max(diff, na.rm = T))

df_hl <- df_both %>% filter(avg_rank <= 10)
df_gy <- df_both %>% filter(avg_rank > 10)

slope <- ggplot() +
    geom_line(data = df_gy, aes(x = year, y = visitors, group = address, alpha = 0.6), color = mcb_palette["Grey"], linewidth = 4) +
    geom_point(data = df_gy, aes(x = year, y = visitors, group = address, color = address, alpha = 0.6), color = mcb_palette["Grey"], size = 4) +
    geom_line(data = df_hl, aes(x = year, y = visitors, group = address, color = address), linewidth = 4) +
    geom_point(data = df_hl, aes(x = year, y = visitors, group = address, color = address), size = 4) +
    geom_text_repel(
        data = df_hl %>% filter(year == 2024),
            aes(x = year, y = visitors, label = address),
        family = "Sora",
        direction = "y", 
        hjust = 0,
        vjust = 1,
        nudge_x = 0.1, 
        segment.color = NA
        ) +
    scale_x_continuous(
        breaks = c(2019, 2024),
        limits = c(2019, 2027),
        position = "top") +
    scale_y_continuous(
        expand = c(0, 0), 
        breaks = c(0, 2, 4, 8, 10),
        limits = c(2, 10)) +
    scale_color_manual(values = unname(mcb_palette)) +
    theme_minimal(base_family = "Sora") + 
    theme(
        legend.position="none",
        plot.margin = unit(c(10, 10, 10, 10), "pt"),
        text = element_text(family = "Sora"),
        # Axis lines
        #axis.line = element_line(color = "black", linewidth = 0.5),
        #axis.line.y = element_line(linewidth = 1, color = mcb_palette["Charcoal"]),
        #axis.line.x = element_line(linewidth = 1, color = mcb_palette["Charcoal"]),
        #axis.line.x.top = element_line(color = "black"),  # show top x-axis line
        # text
        plot.title = element_text(face = "bold", size = 20, margin = margin(t=0, r=0, b=5, l=0, "pt")),
        plot.subtitle = element_text(size = 14, margin = margin(t=0, r=0, b=10, l=0, "pt")),
        plot.caption = element_text(hjust = 0, margin = margin(t=10, r=0, b=0, l=0, "pt")), 
        # title, subtitle position 
        plot.title.position = "plot", 
        plot.caption.position =  "plot",
        # margin for top axis title and ticks
        #axis.title.x.top = element_text(margin = margin(b = 10)),
        axis.text.x.top = element_text(margin = margin(b = 5), size = 12),
        axis.text.y = element_text(hjust = 0, size = 12, margin = margin(t=0, r=0, b=0, l=-12, "pt")),
        axis.title.x = element_blank(),
        axis.title.y = element_blank(),
        # grid lines
        panel.grid.minor.x = element_blank(),
        panel.grid.major.y = element_blank(),
        panel.grid.minor.y = element_blank()
    )

slope
```

```{r}

# prepare for bar chart
df2 <- df %>%
    filter(year==2024) %>%
    group_by(continent) %>%
    summarise(n = n()) %>%
    arrange(-n) %>%
    mutate(
        continent = factor(continent, levels = continent[order(n)]),
        cumulative = cumsum(n),
        position = lag(cumulative),
        position = replace_na(position, 0))
    
# assign colours
continent_colors <- c(
  "Americas" = unname(mcb_palette["Ochre"]),
  "Asia"     = unname(mcb_palette["Teal"]),
  "Europe"   = unname(mcb_palette["Blue"]),
  "Oceania"  = unname(mcb_palette["Grey Pink"])
)

p2 <- ggplot(df2, aes(x = 1, y = n, fill = continent)) +
    geom_col(width = 0.5) +
    geom_text(aes(
            x = 1.3, 
            y = position, 
            label = continent,
            color = continent),
            family = "Sora", 
            hjust = 0, size = 4) +
    coord_flip(clip = "off") +
    scale_y_continuous(limits = c(0, 105), expand = c(0, 0)) +  # Remove padding on y-axis (bar length)
    scale_x_continuous( expand = c(0, 0)) +  # Remove padding on x-axis (position axis) +
    theme_minimal(base_family = "Sora") +
    scale_color_manual(values = continent_colors) +
    scale_fill_manual(values = continent_colors) +
    labs(
        title = "Witty title",
        subtitle = "Number of museums in the top 100 most visited in 2024*",
        caption = "Source: Wikipedia, Art Newspaper. *Most recent visitor values from 2023 or 2024.",
        x = "", 
        y = "") +
    theme(
        legend.position="none",
        plot.margin = margin(t=0, r=0, b=0, l=0),
        axis.text.y = element_blank(),
        axis.ticks.x = element_line(color = mcb_palette["Grey"]),
        axis.ticks.length = unit(5, "pt"), 
        axis.title = element_blank(),
        panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank(),
        panel.grid.major.y = element_blank(),
        panel.grid.minor.y = element_blank(),
        plot.title = element_text(face = "bold", size = 20, margin = margin(t=0, r=0, b=10, l=0, "pt")),
        plot.subtitle = element_text(size = 14, margin = margin(t=0, r=0, b=20, l=0, "pt")),
        plot.caption = element_text(hjust = 0, margin = margin(t=10, r=0, b=0, l=0, "pt"))
        )

girafe(ggobj = p2, width_svg = 10, height_svg = 3)

  
```
